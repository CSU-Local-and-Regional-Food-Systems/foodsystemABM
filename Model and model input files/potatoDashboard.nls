extensions [ matrix table GIS ] ;

;MATRIX NOTES:
;NetLogo's matrix dimensions start with 0!!!
;An entry in row i and column j represents the receipts of account i from account j (columns sell to rows) --need to double check this based on col/row assignments

__includes [ "potatoContractNegotiation.nls"  "potatoContractFulfillment.nls"  "potatoResetStorage.nls" ]


to reset-storage-potatoes

  reset-storage_potatoes potato_farmers
  reset-storage_potatoes potato_repackers
  reset-storage_potatoes potato_shippers
  reset-storage_potatoes potato_processors
  reset-storage_potatoes distributors
  reset-storage_potatoes dps_buyers

end


to reset-promised-amounts-potatoes

  ask potato_farmers [
    set potatoes-russet-conventional-fresh-promised 0
    set potatoes-russet-organic-fresh-promised 0
    set potatoes-purple-conventional-fresh-promised 0
    set potatoes-purple-organic-fresh-promised 0
    set potatoes-russet-conventional-fresh-small-promised 0 
  ]

  ask potato_shippers [
    set potatoes-russet-conventional-fresh_my-incoming-total 0
    set potatoes-russet-conventional-fresh-promised 0
    set potatoes-russet-organic-fresh_my-incoming-total 0
    set potatoes-russet-organic-fresh-promised 0
    set potatoes-purple-conventional-fresh_my-incoming-total 0
    set potatoes-purple-conventional-fresh-promised 0
    set potatoes-purple-organic-fresh_my-incoming-total 0
    set potatoes-purple-organic-fresh-promised 0
    set potatoes-russet-conventional-fresh-small_my-incoming-total 0
    set potatoes-russet-conventional-fresh-small-promised 0
  ]

  ask potato_repackers [
    set potatoes-russet-conventional-fresh_my-incoming-total 0
    set potatoes-russet-conventional-fresh-promised 0
    set potatoes-russet-organic-fresh_my-incoming-total 0
    set potatoes-russet-organic-fresh-promised 0
    set potatoes-purple-conventional-fresh_my-incoming-total 0
    set potatoes-purple-conventional-fresh-promised 0
    set potatoes-purple-organic-fresh_my-incoming-total 0
    set potatoes-purple-organic-fresh-promised 0
    set potatoes-russet-conventional-fresh-small_my-incoming-total 0
    set potatoes-russet-conventional-fresh-small-promised 0 
  ]

  ask potato_processors [
    set potatoes-russet-conventional-fresh_my-incoming-total 0
    set potatoes-russet-conventional-processed-promised 0
    set potatoes-purple-conventional-fresh_my-incoming-total 0
    set potatoes-purple-conventional-processed-promised 0
    set potatoes-purple-organic-fresh_my-incoming-total 0
    set potatoes-purple-organic-processed-promised 0
    set potatoes-russet-conventional-fresh-small_my-incoming-total 0
    set potatoes-russet-conventional-fresh-small-promised 0 
  ]

  ask distributors [
    set potatoes-russet-conventional-fresh_my-incoming-total 0
    set potatoes-russet-conventional-fresh-promised 0
    set potatoes-russet-conventional-processed_my-incoming-total 0
    set potatoes-russet-conventional-processed-promised 0
    set potatoes-russet-organic-fresh_my-incoming-total 0
    set potatoes-russet-organic-fresh-promised 0
    set potatoes-purple-conventional-fresh_my-incoming-total 0
    set potatoes-purple-conventional-fresh-promised 0
    set potatoes-purple-conventional-processed_my-incoming-total 0
    set potatoes-purple-conventional-processed-promised 0
    set potatoes-purple-organic-fresh_my-incoming-total 0
    set potatoes-purple-organic-fresh-promised 0
    set potatoes-purple-organic-processed_my-incoming-total 0
    set potatoes-purple-organic-processed-promised 0
    set potatoes-russet-conventional-fresh-small_my-incoming-total 0
    set potatoes-russet-conventional-fresh-small-promised 0 
  ]
  
  ask dps_buyers [
    set potatoes-russet-conventional-fresh_my-incoming-total 0    
    set potatoes-russet-conventional-processed_my-incoming-total 0    
    set potatoes-russet-organic-fresh_my-incoming-total 0    
    set potatoes-purple-conventional-fresh_my-incoming-total 0    
    set potatoes-purple-conventional-processed_my-incoming-total 0    
    set potatoes-purple-organic-fresh_my-incoming-total 0
    set potatoes-purple-organic-processed_my-incoming-total 0
    set potatoes-russet-conventional-fresh-small_my-incoming-total 0
     ]

end


to reset-tables-potatoes
  
  table:clear potato-table_russet-conventional
  table:clear potato-table_russet-organic
  table:clear potato-table_purple-conventional
  table:clear potato-table_purple-organic
  table:clear potato-table_russet-conventional-small
  table:clear potato-table_russet-conventional-processed                                               
  table:clear potato-table_russet-organic-processed
  table:clear potato-table_purple-conventional-processed
  table:clear potato-table_purple-organic-processed
  
end


to profitability-check-potatoes 
  
ask potato_farmers [
    let predicted-org-profit 0
    let predicted-conv-profit 0

    if farm-transitioning = 1 [
      updateTls potato_farmers
      transition-patches-potatoes
    ]

    if farm-transitioning = 0
    [
      ;basic-profitability-calculation
      let estimated-conv-yield 2.20462 * (mean [potato-canela-mean-yield] of my-patches * hectares-farmed-potatoes)
      ; 1 kg = 2.20462 lbs. so the above shows the yield in lbs.
      let conventional-revenue-for-conv-calc (estimated-conv-yield * potato-conventional-russet_price-farmgate-avg * organic-planning-horizon)
      let acres-farmed-potatoes (hectares-farmed-potatoes * 2.471)  ; 1 ha = 2.471 acres
      let conventional-costs (acres-farmed-potatoes * potato-conventional-russet_cost-input-per-acre * organic-planning-horizon)
      set predicted-conv-profit (conventional-revenue-for-conv-calc - conventional-costs)

      ;organic-profitability-calculation
      let estimated-org-yield 2.20462 * (mean [potato-canela-org-mean-yield] of my-patches * hectares-farmed-potatoes)
      let conventional-revenue-for-org-calc (estimated-org-yield * potato-conventional-russet_price-farmgate-avg * 3)  ; get organic yields (and paying organic inputs) even though getting conventional price per lb.
      let organic-revenue (estimated-org-yield * potato-organic-russet_price-farmgate-avg * (organic-planning-horizon - 3))
      let organic-costs (acres-farmed-potatoes * potato-organic-russet_cost-input-per-acre * organic-planning-horizon)
      set predicted-org-profit (conventional-revenue-for-org-calc + organic-revenue - organic-costs)

      if (farm-size = "small") or (farm-size = "medium")
        [ ifelse predicted-org-profit > predicted-conv-profit
          [ ; organic profitable 
            updateTls potato_farmers
            transition-patches-potatoes
          ]
          [ ;organic unprofitable
            set transition-likelihood-score (transition-likelihood-score - (.025 * transition-likelihood-score) )
            updateTls potato_farmers
            transition-patches-potatoes
          ]
        ]

        if farm-size = "large"
          [ if predicted-org-profit > predicted-conv-profit
            [ ;print "large profitable"
              let patches-conventional my-patches with [ certified-organic =  0  and in-organic-transition = 0 ]
              let conversion-patches n-of 1 patches-conventional
              ask conversion-patches [
                set in-organic-transition 1
                set organic-conversion-tracker 1 ]
                set farm-transitioning 1
            ]
           ;don't transition anything if not profitable: just end procedure
        ]
      ]
    ]
  
  ; could calculate "years until breakeven" as part of profitability and input into other parts of the model or farmer decision-making. parking lot? -el 5/21/21
end



to transition-patches-potatoes

  ask potato_farmers [

    ;transition into organic
    if transition-likelihood-score >= .5 [
;      let my-patches patches with [ farmer = [ farm-id ] of myself ]
      let patches-organic my-patches with [ certified-organic = 1 ]
      let patches-conventional my-patches with [ certified-organic =  0  and in-organic-transition = 0 ]

      if ( count patches-conventional ) > 0 [
        let patches-org count patches-organic
        let patches-all count my-patches
        let organic-percentage ( patches-org / patches-all)

        ; once a farmer reaches 25% of land in organic production and they meet TLS score, they convert the rest of the their land to organic
        ; if they are still below 25% then they transition only one patch to organic
        ifelse organic-percentage > .25 [ 
          ask patches-conventional [
            set in-organic-transition 1
            set organic-conversion-tracker 1
          ] 
        ]
        [ 
          let conversion-patches n-of 1 patches-conventional
          ask conversion-patches [
            set in-organic-transition 1
            set organic-conversion-tracker 1
          ]
        ]
        set farm-transitioning 1
      ]
    ]

    ;transition out of organic (reducing complex if-then structure)
;    if (transition-likelihood-score < .5) and ((farm-size = "large") or ((farm-size = "medium") and (alternative-farmer = 0)) or ((farm-size = "small") and (fully-organic = 0)) or (((farm-size = "medium") and (alternative-farmer = 1 )) and (fully-organic = 0)))
    let transition-out? FALSE
    if (transition-likelihood-score < .5) and (farm-size = "large") [ set transition-out? TRUE ]
    if (farm-size = "medium") and (alternative-farmer = 0) [ set transition-out? TRUE ] 
    if (farm-size = "small") and (fully-organic = 0) [ set transition-out? TRUE ]
    if (farm-size = "medium") and (alternative-farmer = 1 ) and (fully-organic = 0) [ set transition-out? TRUE ]
    if transition-out? = TRUE 
    [
      let patches-organic my-patches with [ certified-organic = 1 ]
      let patches-conventional my-patches with [ certified-organic =  0  and in-organic-transition = 0 ]
      ask patches-organic [
        set in-organic-transition 0
        set organic-conversion-tracker 0
        set certified-organic 0 
      ]
      set grows-organic 0
      set farm-transitioning 0
    ]
   ]
  
    
  let overall-organic-proportion ( ( ( count patches with [ county-potato = 1 and certified-organic = 1 ] ) / ( sum [ patches-occupied ] of potato_farmers ) ) * 100 )
  let overall-transition-proportion ( ( ( count patches with [ county-potato = 1 and in-organic-transition = 1 ] ) / ( sum [ patches-occupied ] of potato_farmers ) ) * 100 )
  set-current-plot "Proportion of Potato Land in Organic vs Conventional Management"
  set-current-plot-pen "Conventional"
  plotxy ( year - 1 ) 100
  set-current-plot-pen "In Transition"
  plotxy ( year - 1 ) ( overall-transition-proportion + overall-organic-proportion )
  set-current-plot-pen "Organic"
  plotxy ( year - 1 ) overall-organic-proportion
  
  ask potato_farmers [ 
    set organic-proportion ( ( ( count my-patches with [ county-potato = 1 and certified-organic = 1 ] ) / (patches-occupied ) ) )
    set transition-proportion ( ( ( count my-patches with [ county-potato = 1 and in-organic-transition = 1 ] ) / ( patches-occupied) ) )
    set conventional-proportion ( ( ( count my-patches with [ county-potato = 1 and in-organic-transition = 0 and certified-organic = 0 ] ) / ( patches-occupied) ) )
  ]
  
end



to update-organic-potatoes

  ask patches with [ (county-potato = 1) and (in-organic-transition = 1) ] [
    set organic-conversion-tracker ( organic-conversion-tracker + 1 )
    if organic-conversion-tracker = 4 [
      set certified-organic 1
      set organic-conversion-tracker 0
      set in-organic-transition 0
    ]

    let my-potato-farmer potato_farmers with [ farm-id = [farmer] of myself]
    
    ask my-potato-farmer [
      let patches-organic my-patches with [ certified-organic = 1 ]
      let patches-conventional my-patches with [ certified-organic =  0 and in-organic-transition = 0 ]
      ifelse patches-organic = my-patches
        [set fully-organic 1]
        [set fully-organic 0]
    ]
  ]

end




to update-display-potatoes

  if display-style = "farm ownership" [
    ask patches with [ occupied = 1 ]
    [ set pcolor farmer ]
  ]

  if display-style = "potato vs barley rotation" [
    ask patches with [ rotation = "barley" ] [ set pcolor 125 ]
    ask patches with [ rotation = "potato" ] [ set pcolor 34 ]
    ask patches with [ rotation = "transition" ] [ set pcolor 85 ] 
  ]

  if display-style = "organic vs conventional" [
    ask patches with [ occupied = 1 ]
    [
      if certified-organic = 0 [ set pcolor 36 ]
      if organic-conversion-tracker = 1 [ set pcolor 67 ]
      if organic-conversion-tracker = 2 [ set pcolor 56 ]
      if organic-conversion-tracker = 3 [ set pcolor 54 ]
      if certified-organic = 1 [ set pcolor 62 ]
    ]
    ask potato_farmers with [ fully-organic = 1 and ( farm-size = "small" or ( farm-size = "medium" and alternative-farmer = 1 ) ) ] 
    [

      ask my-patches [set pcolor 45 ]
    ]
  ]

  if display-style = "bad vs good year" [
    ask patches with [ occupied = 1 ] [
      set pcolor 5
      if ( potato-russet-canela-current-yield > 1.2 * potato-canela-mean-yield ) [ set pcolor 125 ]
      if ( potato-russet-canela-current-yield <= 1.2 * potato-canela-mean-yield ) [ set pcolor 135 ]
      if ( potato-russet-canela-current-yield <= 1.1 * potato-canela-mean-yield ) [ set pcolor 63 ]
      if ( potato-russet-canela-current-yield <= 1 * potato-canela-mean-yield ) [ set pcolor 66 ]
      if ( potato-russet-canela-current-yield <= .9 * potato-canela-mean-yield ) [ set pcolor 45 ]
      if ( potato-russet-canela-current-yield <= .8 * potato-canela-mean-yield ) [ set pcolor 43 ]
      if ( potato-russet-canela-current-yield <= .7 * potato-canela-mean-yield ) [ set pcolor 27 ]
      if ( potato-russet-canela-current-yield <= .6 * potato-canela-mean-yield ) [ set pcolor 25 ]
      if ( potato-russet-canela-current-yield <= .5 * potato-canela-mean-yield ) [ set pcolor 23 ]
      if ( potato-russet-canela-current-yield <= .4 * potato-canela-mean-yield ) [ set pcolor 17 ]
      if ( potato-russet-canela-current-yield <= .3 * potato-canela-mean-yield ) [ set pcolor 15 ]
      if ( potato-russet-canela-current-yield <= .2 * potato-canela-mean-yield ) [ set pcolor 12 ]
    ]
  ]

  if display-style = "transition likelihood score" [
    ask potato_farmers [ 
      if ( transition-likelihood-score <  1 )  [ ask my-patches [set pcolor 104 ] ]
      if ( transition-likelihood-score < .9 ) [ ask my-patches [set pcolor 62 ] ]
      if ( transition-likelihood-score < .8 ) [ ask my-patches [set pcolor 63 ] ]
      if ( transition-likelihood-score < .7 ) [ ask my-patches [set pcolor 65 ] ]
      if ( transition-likelihood-score < .6 ) [ ask my-patches [set pcolor 67 ] ]
      if ( transition-likelihood-score < .5 ) [ ask my-patches [set pcolor 17 ] ]
      if ( transition-likelihood-score < .4 ) [ ask my-patches [set pcolor 16 ] ]
      if ( transition-likelihood-score < .3 ) [ ask my-patches [set pcolor 15 ] ]
      if ( transition-likelihood-score < .2 ) [ ask my-patches [set pcolor 14 ] ]
      if ( transition-likelihood-score < .1 ) [ ask my-patches [set pcolor 13 ] ]
    ]
  ]

  if display-style = "farm size/ideology" [
    ask potato_farmers  [ 
      if ( farm-size = "small" and alternative-farmer = 0 )  [ ask my-patches [set pcolor 63 ] ]
      if ( farm-size = "small" and alternative-farmer = 1 )  [ ask my-patches [set pcolor 67 ] ]
      if ( farm-size = "medium" and alternative-farmer = 0 ) [ ask my-patches [set pcolor 94 ] ]
      if ( farm-size = "medium" and alternative-farmer = 1 ) [ ask my-patches [set pcolor 97 ] ]
      if ( farm-size = "large" and alternative-farmer = 0 )  [ ask my-patches [set pcolor 14 ] ]
      if ( farm-size = "large" and alternative-farmer = 1 )  [ ask my-patches [set pcolor 17 ] ]
    ]
  ]

end


to set-contracts-potatoes

  ;no matter the scenario, the farmer sells to shippers and repackers

  ;farmers to shippers
  setContracts_russetConventionalFresh  potato_farmers  potato_shippers  number-potato_shippers  TRUE
  setContracts_russetOrganicFresh  potato_farmers  potato_shippers  number-potato_shippers  TRUE
  setContracts_purpleConventionalFresh  potato_farmers  potato_shippers  number-potato_shippers  TRUE
  setContracts_purpleOrganicFresh  potato_farmers  potato_shippers  number-potato_shippers  TRUE
  setContracts_smallFresh  potato_farmers  potato_shippers  number-potato_shippers  TRUE

  ;farmers to repackers
  setContracts_russetConventionalFresh  potato_farmers  potato_repackers  number-potato_repackers  TRUE
  setContracts_russetOrganicFresh  potato_farmers  potato_repackers  number-potato_repackers  TRUE
  setContracts_purpleConventionalFresh  potato_farmers  potato_repackers  number-potato_repackers  TRUE
  setContracts_purpleOrganicFresh  potato_farmers  potato_repackers  number-potato_repackers  TRUE
  setContracts_smallFresh  potato_farmers  potato_repackers  number-potato_repackers  TRUE

  ;scenario 1: baseline
  if potato-scenario = "baseline"[

    ;shippers to distributors
    setContracts_russetConventionalFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_russetOrganicFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_purpleConventionalFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_purpleOrganicFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_smallFresh  potato_shippers  distributors  number-distributors  TRUE

    ; dps purchase baseline french fries from distributor - this happens in go procedure now but could move it here and change to annual amt fries bought vs. weekly amt
    ; dps-purchases-baseline-french-fries
  ]

  ;scenario 2: fresh-CO
  if potato-scenario = "fresh-CO"[

    ;shippers to distributors
    setContracts_russetConventionalFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_russetOrganicFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_purpleConventionalFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_purpleOrganicFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_smallFresh  potato_shippers  distributors  number-distributors  TRUE

    ; DPS purchase fresh CO russets from distributors
    setContracts_russetConventionalFresh  distributors  dps_buyers  number-dps_buyers  FALSE

  ]

  ;scenario 3: gfpp
  if potato-scenario = "gfpp"[

    ; DPS purchase russet conventional fresh potatoes from shippers
    setContracts_russetConventionalFresh  potato_shippers  dps_buyers number-dps_buyers  FALSE

    ;then potatoes flow through system as normal
    setContracts_russetConventionalFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_russetOrganicFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_purpleConventionalFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_purpleOrganicFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_smallFresh  potato_shippers  distributors  number-distributors  TRUE
  ]

  ;scenario 4: small-potatoes
  if potato-scenario = "small-potatoes"[

    ; DPS purchase small russet conventional fresh potatoes from shippers
    setContracts_smallFresh  potato_shippers  dps_buyers  number-dps_buyers  FALSE

    ;then potatoes flow through system as normal
    setContracts_russetConventionalFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_russetOrganicFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_purpleConventionalFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_purpleOrganicFresh  potato_shippers  distributors  number-distributors  TRUE
    setContracts_smallFresh  potato_shippers  distributors  number-distributors  TRUE
  ]

  ;scenario 5: specialty-product
  if potato-scenario = "specialty-product"[
    ;shippers to processors
    setContracts_russetConventionalFresh  potato_shippers  potato_processors  number-potato_processors  TRUE
    setContracts_russetOrganicFresh  potato_shippers  potato_processors  number-potato_processors  TRUE
    setContracts_purpleConventionalFresh  potato_shippers  potato_processors  number-potato_processors  TRUE
    setContracts_purpleOrganicFresh  potato_shippers  potato_processors  number-potato_processors  TRUE
    setContracts_smallFresh  potato_shippers  potato_processors  number-potato_processors  TRUE

    ;processors to distributors
    setContracts_russetConventionalProcessed  potato_processors  distributors  number-distributors  TRUE
    setContracts_purpleConventionalProcessed  potato_processors  distributors  number-distributors  TRUE
    setContracts_purpleOrganicProcessed  potato_processors  distributors  number-distributors  TRUE

    ; DPS purchase purple processed potatoes (could change this to be combo of products in final scenario)
    setContracts_purpleConventionalProcessed  distributors  dps_buyers  number-dps_buyers  FALSE
  ]

end


to produce-potatoes
  set-potato-yield 
  update-bad-production-year-potatoes
  set-potato-farm-crop-allocation 
  set-potato-barley-rotation
  calculate-annual-production-potatoes 
end


to set-potato-yield ; set single-year random potato yield
  ; set potato data year to be 1 of 10 years of data 2010-2019 (random 10 command will output 0-9)
  ; set potato-data-year 2010 + random 10
  
  ; old code for 40 years of potato data: 
  ;set potato-data-year 1980 + random 40
  
  ; hardwire yield data year so can set seed randomly for other model behavior and maintain some stability in yields
  if year = 1 [ set potato-data-year 2010 ]
  if year = 2 [ set potato-data-year 2011 ]
  if year = 3 [ set potato-data-year 2012 ]
  if year = 4 [ set potato-data-year 2013 ]
  if year = 5 [ set potato-data-year 2014 ]
  if year = 6 [ set potato-data-year 2015 ]
  if year = 7 [ set potato-data-year 2016 ]
  if year = 8 [ set potato-data-year 2017 ]
  if year = 9 [ set potato-data-year 2018 ]
  if year = 10 [ set potato-data-year 2019 ]
  if year = 11 [ set potato-data-year 2010 ]
  
  ; set potato-data-year 1981 ; particularly bad production year for potatoes if helpful for stress testing any bits of code

  let file-name-canela (word potato-data-year "_canela_con.asc")
  set canela-load gis:load-dataset file-name-canela
  gis:apply-raster canela-load potato-russet-canela-current-yield

  let file-name-canela-org (word potato-data-year "_canela_org.asc")
  set canela-org-load gis:load-dataset file-name-canela-org
  gis:apply-raster canela-org-load potato-russet-canela-org-current-yield

  let file-name-purple (word potato-data-year "_purple_con.asc")
  set purple-load gis:load-dataset file-name-purple
  gis:apply-raster purple-load potato-purple-current-yield

  let file-name-purple-org (word potato-data-year "_purple_org.asc")
  set purple-org-load gis:load-dataset file-name-purple-org
  gis:apply-raster purple-org-load potato-purple-org-current-yield

  ask patches with [ potato-yes-no = 1 ] [
    ifelse potato-russet-canela-current-yield >= 0; sets all non-producing patches to 0, otherwise they are NaN. Also see next set of commands re: NaN
    []
    [ set potato-russet-canela-current-yield 0
      set potato-russet-canela-org-current-yield 0
      set potato-purple-current-yield 0
      set potato-purple-org-current-yield 0
    ]
  ]

  ask patches with [occupied = 1 and potato-yes-no = 1 ] [
    if potato-russet-canela-current-yield = 0 [
      set potato-russet-canela-current-yield mean [potato-russet-canela-current-yield] of patches with [potato-yes-no = 1]
      set potato-russet-canela-org-current-yield mean [potato-russet-canela-org-current-yield] of patches with [potato-yes-no = 1]
      set potato-purple-current-yield mean [potato-purple-current-yield] of patches with [potato-yes-no = 1]
      set potato-purple-org-current-yield mean [potato-purple-org-current-yield] of patches with [potato-yes-no = 1]
    ]
  ]
 

end

to update-bad-production-year-potatoes

  ask potato_farmers [
    let last-year-mediocre mediocre-production-year
    let last-year-bad bad-production-year
    set mediocre-production-year 0
    set bad-production-year 0

    ;; if production of any variety is between 60 - 100% of mean yield the year is considered a "mediocre" production year.
    ;; if production of any variety is below 60% of its mean yield, the year is considered a "bad" production year.
    ;; these variables are used in the TLS update.

    ; mediocre production year
    if (.6 * potato-canela-mean-yield < potato-russet-canela-current-yield) and (potato-russet-canela-current-yield < potato-canela-mean-yield)
        [set mediocre-production-year 1]
    if (.6 * potato-canela-org-mean-yield < potato-russet-canela-current-yield) and (potato-russet-canela-current-yield < potato-canela-org-mean-yield)
        [set mediocre-production-year 1]
    if (.6 * potato-purple-mean-yield < potato-russet-canela-current-yield) and (potato-russet-canela-current-yield < potato-purple-mean-yield)
        [set mediocre-production-year 1]
    if (.6 * potato-purple-org-mean-yield < potato-russet-canela-current-yield) and (potato-russet-canela-current-yield < potato-purple-org-mean-yield)
        [set mediocre-production-year 1]

    ; bad production year
    if potato-russet-canela-current-yield <= .6 * potato-canela-mean-yield
        [set bad-production-year 1]
    if potato-russet-canela-org-current-yield <= .6 * potato-canela-org-mean-yield
        [set bad-production-year 1]
    if potato-purple-current-yield <= .6 * potato-purple-mean-yield
        [set bad-production-year 1]
    if potato-purple-org-current-yield <= .6 * potato-purple-org-mean-yield
        [set bad-production-year 1]
    ]

end



to set-potato-farm-crop-allocation   ; could become dynamic process or have its own set of tls conditions like organic does now

  ask potato_farmers [
    set russet-canela-allocation 0.8
    set purple-allocation 0.2
  ]

end


to set-potato-barley-rotation

  if potato-rotation-year = 3 [   ; all producers on same schedule but don't need to be- just doesn't seem to be important to model different schedules
    ask potato_farmers with [patches-in-rotation > 0] [   ; those with patches that rotate, otherwise just grow within 1 or 2 patches
          ask patches with [rotation = "barley"] with [farmer = [farm-id] of myself]
          [set rotation "transition"]
          ask n-of (patches-in-rotation) patches with [farmer = [farm-id] of myself] with [rotation = "potato"]
          [set rotation "barley"]
          ask patches with [rotation = "transition"] with [farmer = [farm-id] of myself]
          [set rotation "potato"]
    ]
    set potato-rotation-year 0
  ]

  set potato-rotation-year potato-rotation-year + 1

end


to calculate-annual-production-potatoes
  
  ask potato_farmers ;calculates annual production of each farmer in lbs. 
   [
      ;important note: in-organic-transition patches are counted as organic for hectare calculations below because those are used for input costs
      ;but in-organic-transition patches are counted as conventional in production calcs because they do not produce certifiable organic products yet
      set my-patches patches with [farmer = [farm-id] of myself] 
      let my-potato-patches patches with [ farmer = [ farm-id ] of myself and rotation = "potato"]
      let my-organic-patches-for-costs my-potato-patches with [ certified-organic = 1 or in-organic-transition = 1 ]
      let my-organic-patches-for-production my-potato-patches with [ certified-organic = 1 ]
      let my-conventional-patches-for-costs my-potato-patches with [ certified-organic = 0 ]
      let my-conventional-patches-for-production my-potato-patches with [ certified-organic = 0 or in-organic-transition = 1 ]
      
      ; these calculations count the hectares each farmer has in the four potato products--used in input cost calcs.

      set my-russet-conventional-hectares-for-costs (count my-conventional-patches-for-costs with [remainder-patch = 0] * 100 * russet-canela-allocation) + 
      (count my-conventional-patches-for-costs with [remainder-patch = 1] * russet-canela-allocation * (hectares-farmed-potatoes - (100 * (patches-in-potatoes - 1))))

      set my-russet-organic-hectares-for-costs (count my-organic-patches-for-costs with [remainder-patch = 0] * 100 * russet-canela-allocation) + 
      (count my-organic-patches-for-costs with [remainder-patch = 1] * russet-canela-allocation * (hectares-farmed-potatoes - (100 * (patches-in-potatoes - 1))))
    
      set my-purple-conventional-hectares-for-costs (count my-conventional-patches-for-costs with [remainder-patch = 0] * 100 * purple-allocation) + 
      (count my-conventional-patches-for-costs with [remainder-patch = 1] * purple-allocation * (hectares-farmed-potatoes - (100 * (patches-in-potatoes - 1))))

      set my-purple-organic-hectares-for-costs (count my-organic-patches-for-costs with [remainder-patch = 0] * 100 * purple-allocation) + 
      (count my-organic-patches-for-costs with [remainder-patch = 1] * purple-allocation * (hectares-farmed-potatoes - (100 * (patches-in-potatoes - 1))))

      set assets (assets - (my-russet-conventional-hectares-for-costs * (potato-conventional-russet_cost-input-per-acre / .4047)))
      set assets (assets - (my-russet-organic-hectares-for-costs * (potato-organic-russet_cost-input-per-acre / .4047)))
      set assets (assets - (my-purple-conventional-hectares-for-costs * (potato-conventional-purple_cost-input-per-acre / .4047)))
      set assets (assets - (my-purple-organic-hectares-for-costs * (potato-organic-purple_cost-input-per-acre / .4047)))
 
      ;-----------------------------------------------------
      ; each farmer's annual production from DSSAT data calculated here 

      ; took out old 2.20462 kg to lb conversion from all calculations below because new potato yield .asc files are in cwt/acre so we use a different conversion factor for cwt/acre -> lb/patch 
      ; 1 cwt = 100 lb
      ; 1 hectare = 2.47105 acres 
      ; 1 patch = 100 hectares
      ; 1 cwt / 1 acre * ( 100 lbs / 1 cwt ) * ( 2.47105 acres / 1 hectare ) * ( 100 hectares / 1 patch ) = 24,710.5 conversion factor 
      ; cwt / acre * 24,710.5 = lbs / patch 
      ; el/kj 1/10/22
      ; need to double check remainder calc. per kj/el conversation and sb/el email exchange 1/10/2022
      ; stef and erin added /100 at end of remainder patch term to convert hectares to patches
      
      set russet-canela-current-production ((((24710.5 * sum [potato-russet-canela-current-yield] of my-conventional-patches-for-production with [remainder-patch = 0] * russet-canela-allocation)) 
        + (24710.5 * ( sum [potato-russet-canela-current-yield] of my-conventional-patches-for-production with [remainder-patch = 1] * russet-canela-allocation * ((hectares-farmed-potatoes - (100 * (patches-in-potatoes - 1))) / 100)))))

      set purple-current-production ((((24710.5 * sum [potato-purple-current-yield] of my-conventional-patches-for-production with [remainder-patch = 0] * purple-allocation)) 
        + (24710.5 * ( sum [potato-purple-current-yield] of my-conventional-patches-for-production with [remainder-patch = 1] * purple-allocation * ((hectares-farmed-potatoes - (100 * (patches-in-potatoes - 1))) / 100)))))
  
      set russet-canela-org-current-production ((((24710.5 * sum [potato-russet-canela-org-current-yield] of my-organic-patches-for-production with [remainder-patch = 0] * russet-canela-allocation)) 
        + (24710.5 * (  sum [potato-russet-canela-org-current-yield] of my-organic-patches-for-production with [remainder-patch = 1] * russet-canela-allocation * ((hectares-farmed-potatoes - (100 * (patches-in-potatoes - 1))) / 100 )))))
 
      set purple-org-current-production ((((24710.5 * sum [potato-purple-org-current-yield] of my-organic-patches-for-production with [remainder-patch = 0] * purple-allocation)) 
        + (24710.5 * ( sum [potato-purple-org-current-yield] of my-organic-patches-for-production with [remainder-patch = 1] * purple-allocation * ((hectares-farmed-potatoes - (100 * (patches-in-potatoes - 1))) / 100)))))


      ; UPDATE FARMER INVENTORY HERE

      set potatoes-russet-conventional-fresh_inventory-current (potatoes-russet-conventional-fresh_inventory-current + (.67 * russet-canela-current-production))
      set potatoes-russet-conventional-fresh-small_inventory-current (potatoes-russet-conventional-fresh-small_inventory-current + (.33 * russet-canela-current-production))
      set potatoes-russet-organic-fresh_inventory-current ( potatoes-russet-organic-fresh_inventory-current + russet-canela-org-current-production)
      set potatoes-purple-conventional-fresh_inventory-current (potatoes-purple-conventional-fresh_inventory-current + purple-current-production)
      set potatoes-purple-organic-fresh_inventory-current (potatoes-purple-organic-fresh_inventory-current + purple-org-current-production)

      set potatoes-russet-conventional_passthrough-annual potatoes-russet-conventional-fresh_inventory-current
      set potatoes-russet-organic_passthrough-annual potatoes-russet-organic-fresh_inventory-current
      set potatoes-purple-conventional_passthrough-annual potatoes-purple-conventional-fresh_inventory-current
      set potatoes-purple-organic_passthrough-annual potatoes-purple-organic-fresh_inventory-current
      set potatoes-russet-conventional-small_passthrough-annual potatoes-russet-conventional-fresh-small_inventory-current
   ]

end

to update-potato-production

  ;update annual and total potato production counters based on calculate annual production procedure
  set potato-russet-conventional_production-annual sum [russet-canela-current-production] of potato_farmers 
  set potato-russet-conventional_production-total-model-run (potato-russet-conventional_production-total-model-run + potato-russet-conventional_production-annual)
  set potato-russet-organic_production-annual sum [russet-canela-org-current-production] of potato_farmers 
  set potato-russet-organic_production-total-model-run (potato-russet-organic_production-total-model-run + potato-russet-organic_production-annual)
  set potato-purple-conventional_production-annual sum [purple-current-production] of potato_farmers 
  set potato-purple-conventional_production-total-model-run (potato-purple-conventional_production-total-model-run + potato-purple-conventional_production-annual)
  set potato-purple-organic_production-annual sum [purple-org-current-production] of potato_farmers 
  set potato-purple-organic_production-total-model-run (potato-purple-organic_production-total-model-run + potato-purple-organic_production-annual)

end 

to fulfill-contracts-potatoes

   ;no matter the scenario, the farmer sells to shippers and repackers

  ; FARMER TO SHIPPER CONTRACT FULFILLMENT
  print "mean shipper assets before buying"
  print mean [assets] of potato_shippers
  fulfillContracts_russetConventionalFresh potato_farmers potato_shippers
  fulfillContracts_russetOrganicFresh potato_farmers potato_shippers
  fulfillContracts_purpleConventionalFresh potato_farmers potato_shippers
  fulfillContracts_purpleOrganicFresh potato_farmers potato_shippers
  fulfillContracts_smallFresh potato_farmers potato_shippers
  print "mean shipper assets after buying"
  print mean [assets] of potato_shippers

  ; FARMER TO REPACKER CONTRACT FULFILLMENT
  fulfillContracts_russetConventionalFresh potato_farmers potato_repackers
  fulfillContracts_russetOrganicFresh potato_farmers potato_repackers
  fulfillContracts_purpleConventionalFresh potato_farmers potato_repackers
  fulfillContracts_purpleOrganicFresh potato_farmers potato_repackers
  fulfillContracts_smallFresh potato_farmers potato_repackers

  if potato-scenario = "baseline" [
    fulfillContracts_russetConventionalFresh potato_shippers distributors
    fulfillContracts_russetOrganicFresh potato_shippers distributors
    fulfillContracts_purpleConventionalFresh potato_shippers distributors
    fulfillContracts_purpleOrganicFresh potato_shippers distributors
    fulfillContracts_smallFresh potato_shippers distributors
    
    ; dps purchases in dps-purchases-baseline-french-fries procedure below
  ]

  if potato-scenario = "fresh-CO" [
    fulfillContracts_russetConventionalFresh potato_shippers distributors
    fulfillContracts_russetOrganicFresh potato_shippers distributors
    fulfillContracts_purpleConventionalFresh potato_shippers distributors
    fulfillContracts_purpleOrganicFresh potato_shippers distributors
    fulfillContracts_smallFresh potato_shippers distributors

    print "dps inventory before" print [potatoes-russet-conventional-fresh_inventory-current] of dps_buyers
    fulfillContracts_russetConventionalFresh distributors dps_buyers
    print "dps inventory after" print [potatoes-russet-conventional-fresh_inventory-current] of dps_buyers
  ]

  if potato-scenario = "gfpp" [
    fulfillContracts_russetConventionalFresh potato_shippers dps_buyers

    fulfillContracts_russetConventionalFresh potato_shippers distributors
    fulfillContracts_russetOrganicFresh potato_shippers distributors
    fulfillContracts_purpleConventionalFresh potato_shippers distributors
    fulfillContracts_purpleOrganicFresh potato_shippers distributors
    fulfillContracts_smallFresh potato_shippers distributors
  ]

  if potato-scenario = "small-potatoes" [
    fulfillContracts_smallFresh potato_shippers dps_buyers

    fulfillContracts_russetConventionalFresh potato_shippers distributors
    fulfillContracts_russetOrganicFresh potato_shippers distributors
    fulfillContracts_purpleConventionalFresh potato_shippers distributors
    fulfillContracts_purpleOrganicFresh potato_shippers distributors
    fulfillContracts_smallFresh potato_shippers distributors
  ]

  if potato-scenario = "specialty-product" [
  fulfillContracts_russetConventionalFresh potato_shippers potato_processors
  fulfillContracts_purpleConventionalFresh potato_shippers potato_processors
  fulfillContracts_purpleOrganicFresh potato_shippers potato_processors
  fulfillContracts_smallFresh potato_shippers potato_processors
    
  ; dps purchases in fulfill-processor-contracts-potatoes procedure below
  ]

end


to process-potatoes
; if add different types of processed potatoes later (other than russet conventional and purple conventional, will need to add them into this procedure)
  
  ask potato_processors [
    ; combine small and regular sized potatoes into one inventory variable because won't matter once they're processed
    set potatoes-russet-conventional-fresh_inventory-current (potatoes-russet-conventional-fresh_inventory-current + potatoes-russet-conventional-fresh-small_inventory-current)
    set potatoes-russet-conventional-fresh-small_inventory-current 0

    if potatoes-russet-conventional-fresh_inventory-current > 1 [
      let conversion ( potatoes-russet-conventional-fresh_inventory-current ) ; assume no volume change during processing step -- could change this
      let processed-space-available ( potatoes-russet-conventional-processed_inventory-maximum - potatoes-russet-conventional-processed_inventory-current )
      ifelse processed-space-available >= conversion
      [ set potatoes-russet-conventional-processed_inventory-current ( potatoes-russet-conventional-processed_inventory-current + conversion )
        set potatoes-russet-conventional-fresh_inventory-current 0 ]
      [ set potatoes-russet-conventional-processed_inventory-current ( potatoes-russet-conventional-processed_inventory-current + processed-space-available )
        set potatoes-russet-conventional-fresh_inventory-current ( potatoes-russet-conventional-fresh_inventory-current - processed-space-available ) ] ;* 1.25 ) ]
    ]
    
    if potatoes-purple-conventional-fresh_inventory-current > 1 [
      let conversion ( potatoes-purple-conventional-fresh_inventory-current ) ; assume no volume change during processing step -- could change this
      let processed-space-available ( potatoes-purple-conventional-processed_inventory-maximum - potatoes-purple-conventional-processed_inventory-current )
      ifelse processed-space-available >= conversion
      [ set potatoes-purple-conventional-processed_inventory-current ( potatoes-purple-conventional-processed_inventory-current + conversion )
        set potatoes-purple-conventional-fresh_inventory-current 0 ]
      [ set potatoes-purple-conventional-processed_inventory-current ( potatoes-purple-conventional-processed_inventory-current + processed-space-available )
        set potatoes-purple-conventional-fresh_inventory-current ( potatoes-purple-conventional-fresh_inventory-current - processed-space-available ) ] ;* 1.25 ) ]
    ]
    
  ]

end


to fulfill-processor-contracts-potatoes
  if potato-scenario = "specialty-product" [

    ; PROCESSOR TO DISTRIBUTOR CONTRACT FULFILLMENT
    fulfillContracts_russetConventionalProcessed potato_processors distributors
    fulfillContracts_purpleConventionalProcessed potato_processors distributors
    fulfillContracts_purpleOrganicProcessed potato_processors distributors

    ; DISTRIBUTOR TO DPS CONTRACT FULFILLMENT
    fulfillContracts_purpleConventionalProcessed  distributors  dps_buyers
  ]

end


to dps-purchases-baseline-french-fries
  ; assume from 2018-19 DPS purchase records courtesy of Chef Ann Wilson via Marion Kalb that DPS purchases 281,427 lbs. french fries annually (we are adding french
  ;fries, seasoned diced potatoes, and fresh baking potatoes purchased in 18-19 to get this number).  Divide total lbs. by number of weeks school lunch is served
  ;to get weekly purchase amount.  assume lunch is served 35 weeks out of the year. so the weekly amount is 8,041 lbs. for the school district.

;  set school inventory and cash to change based on amount french fries purchased by DPS annually divided by number of weeks in school year
;  then set distributor inventory and cash to change by same amount

  ask distributors [
    set out-of-state-french-fry_price-to-sell random-normal potato-conventional-russet-processed_price-distributor-receives-avg potato-conventional-russet-processed_price-distributor-receives-stdev
  ]

    ask dps_buyers [ if out-of-state-french-fry_inventory-current < out-of-state-french-fry_inventory-maximum
    [
      let my-distributor n-of 1 ( distributors with-min [ out-of-state-french-fry_price-to-sell ] )
      let amount-exchanged ( out-of-state-french-fry_inventory-maximum / 35 )   ; inventory max divided by weeks in school year 
      let price-exchanged item 0 [out-of-state-french-fry_price-to-sell] of my-distributor
      let price-tag (amount-exchanged * price-exchanged)

      set out-of-state-french-fry_inventory-current out-of-state-french-fry_inventory-current + amount-exchanged
      set assets assets - price-tag

      ask my-distributor [
        set out-of-state-french-fry_inventory-current out-of-state-french-fry_inventory-current - amount-exchanged
        set assets assets + price-tag
      ]
    ]
  ]

end