
;This procedure carries out contract fulfillment amongst different agents in the peach supply chain. Peaches and cash are exchanged based on contracts set during
;the contract negotiation phase. Peaches sent and outstanding quantity table entries are updated to reflect these changes. 

;Table notes:
;table set used to update price
;table sum used to update quantity


to fulfillContracts_peachesConventional [ sellers buyers ] 
  
  if buyers = packer [ set packer peach_farmers with [outsource-packer = 1 ] ]
  if sellers = packer [ set packer peach_farmers with [outsource-packer = 1 ] ]  
  
  let row-id 0
  let col-id 0
  
ask sellers[
    set col-id id
    let product-avail-to-sell peaches-conventional_inventory-current
    let amount-exchanged 0
    let price-exchanged 0
    let price-tag 0

    ask buyers[
      set row-id id
      
      if check-entry peach-table_conventional  row-id col-id PEACH_OUTSTANDING_QUANTITY PEACH_QUANTITY PEACH_SENT [     
      
        ifelse check-bigger-than-entry peach-table_conventional  row-id col-id PEACH_OUTSTANDING_QUANTITY product-avail-to-sell
        [ set amount-exchanged report-value peach-table_conventional  row-id col-id PEACH_OUTSTANDING_QUANTITY 
          if debug-mode = true [print "amount exchanged:" print amount-exchanged] ]
        [ set amount-exchanged product-avail-to-sell
          if debug-mode = true [print "amount exchanged:" print amount-exchanged] ]       

        set price-exchanged report-value peach-table_conventional  row-id col-id PEACH_PRICE
        
        if debug-mode = true [ 
          print " "
          print "--------------------------------------------------------------"
          print "price exchanged:" print price-exchanged 
          ]
          
          set price-tag (price-exchanged * amount-exchanged)
          if debug-mode = true [
            print "price tag:" print price-tag]

          ;set buyer assets and inventory
          if debug-mode = true [
            print "buyer assets before:" print assets]
        
          set assets (assets - price-tag)
        
          if debug-mode = true [
            print "buyer assets after:" print assets]
          if debug-mode = true [
            print "buyer inventory before:" print peaches-conventional_inventory-current]
        
          set peaches-conventional_inventory-current (peaches-conventional_inventory-current + amount-exchanged)
          
          if debug-mode = true [
            print "buyer inventory after:" print peaches-conventional_inventory-current]

          ;set seller assets and inventory
          ask myself [
            if debug-mode = true [
              print "seller assets before:" print assets]
          
            set assets (assets + price-tag)
          
            if debug-mode = true [
              print "seller assets after:" print assets]
            if debug-mode = true [
              print "seller inventory before:" print peaches-conventional_inventory-current]
          
            set peaches-conventional_inventory-current (peaches-conventional_inventory-current - amount-exchanged)
          
            if debug-mode = true [
              print "seller inventory after:" print peaches-conventional_inventory-current
              print " "
              print "--------------------------------------------------------------"]
          
            table_sum peach-table_conventional  row-id col-id PEACH_SENT amount-exchanged debug-mode  
            update-outstanding-quantity peach-table_conventional  row-id col-id PEACH_OUTSTANDING_QUANTITY PEACH_QUANTITY PEACH_SENT
            ]     
        ]
    ]
  ]
  
  if debug-mode = TRUE [
    print "potato price table"
    debugMatrix peach-table_conventional  PEACH_PRICE ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "potato quantity table"
    debugMatrix peach-table_conventional  PEACH_QUANTITY ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "potatoes sent table"
    debugMatrix peach-table_conventional  PEACH_SENT ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "potatoes outstanding quantity table"
    debugMatrix peach-table_conventional  PEACH_OUTSTANDING_QUANTITY ( [ who ] of ( max-one-of turtles [ who ] ) ) ]

end 


; END OF THIS PEACH TYPE
;*****************************************************************************************************************************
;*****************************************************************************************************************************
; START OF NEW PEACH TYPE


to fulfillContracts_peachesOrganic [ sellers buyers ] 
  
  if buyers = packer [ set packer peach_farmers with [outsource-packer = 1 ] ]
  if sellers = packer [ set packer peach_farmers with [outsource-packer = 1 ] ]    
  
ask sellers[
    let col-id id
    let product-avail-to-sell peaches-organic_inventory-current
    let amount-exchanged 0
    let price-exchanged 0
    let price-tag 0

    ask buyers[
      let row-id id
      
      if check-entry peach-table_organic  row-id col-id PEACH_OUTSTANDING_QUANTITY PEACH_QUANTITY PEACH_SENT [
        
        ifelse check-bigger-than-entry peach-table_organic  row-id col-id PEACH_OUTSTANDING_QUANTITY product-avail-to-sell

        [ set amount-exchanged report-value peach-table_organic  row-id col-id PEACH_OUTSTANDING_QUANTITY 
          if debug-mode = true [print "amount exchanged:" print amount-exchanged] ]
        [ set amount-exchanged product-avail-to-sell
          if debug-mode = true [print "amount exchanged:" print amount-exchanged] ]
        
          set price-exchanged report-value peach-table_organic  row-id col-id PEACH_PRICE
        if debug-mode = true [ 
          print " "
          print "--------------------------------------------------------------"
          print "price exchanged:" print price-exchanged ]

          
          set price-tag (price-exchanged * amount-exchanged)
          if debug-mode = true [
            print "price tag:" print price-tag]

          ;set buyer assets and inventory
          if debug-mode = true [
            print "buyer assets before:" print assets]
          set assets (assets - price-tag)
          if debug-mode = true [
            print "buyer assets after:" print assets]
          if debug-mode = true [
            print "buyer inventory before:" print peaches-organic_inventory-current]
          set peaches-organic_inventory-current (peaches-organic_inventory-current + amount-exchanged)
          if debug-mode = true [
            print "buyer inventory after:" print peaches-organic_inventory-current]

          ;set seller assets and inventory
          ask myself [
            if debug-mode = true [
              print "seller assets before:" print assets]
            set assets (assets + price-tag)
            if debug-mode = true [
              print "seller assets after:" print assets]
            if debug-mode = true [
              print "seller inventory before:" print peaches-organic_inventory-current]
            set peaches-organic_inventory-current (peaches-organic_inventory-current - amount-exchanged)
            if debug-mode = true [
              print "seller inventory after:" print peaches-organic_inventory-current
              print " "
              print "--------------------------------------------------------------"]
           table_sum peach-table_organic  row-id col-id PEACH_SENT amount-exchanged debug-mode  
           update-outstanding-quantity peach-table_organic  row-id col-id PEACH_OUTSTANDING_QUANTITY PEACH_QUANTITY PEACH_SENT
        ]
        ]
    ]
  ]
  
  if debug-mode = TRUE [
    print "potato price table"
    debugMatrix peach-table_organic  PEACH_PRICE ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "potato quantity table"
    debugMatrix peach-table_organic  PEACH_QUANTITY ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "potatoes sent table"
    debugMatrix peach-table_organic  PEACH_SENT ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "potatoes outstanding quantity table"
    debugMatrix peach-table_organic  PEACH_OUTSTANDING_QUANTITY ( [ who ] of ( max-one-of turtles [ who ] ) ) ]

end 



; END OF THIS PEACH TYPE
;*****************************************************************************************************************************
;*****************************************************************************************************************************
  to fulfillContracts_peachesSeconds [ sellers buyers ] 
  
  if buyers = packer [ set packer peach_farmers with [outsource-packer = 1 ] ]
  if sellers = packer [ set packer peach_farmers with [outsource-packer = 1 ] ] 
  
ask sellers[
    let col-id id
    let product-avail-to-sell peaches-seconds_inventory-current
    let amount-exchanged 0
    let price-exchanged 0
    let price-tag 0

    ask buyers[
      let row-id id
      
      if check-entry peach-table_seconds  row-id col-id PEACH_OUTSTANDING_QUANTITY PEACH_QUANTITY PEACH_SENT [
        
        ifelse check-bigger-than-entry peach-table_seconds  row-id col-id PEACH_OUTSTANDING_QUANTITY product-avail-to-sell
       
        [ set amount-exchanged report-value peach-table_seconds  row-id col-id PEACH_OUTSTANDING_QUANTITY 
          if debug-mode = true [print "amount exchanged:" print amount-exchanged] ]
        [ set amount-exchanged product-avail-to-sell
          if debug-mode = true [print "amount exchanged:" print amount-exchanged] ]
        
          set price-exchanged report-value peach-table_seconds  row-id col-id PEACH_PRICE
        if debug-mode = true [ print "price exchanged:" print price-exchanged ]

          
          set price-tag price-exchanged * amount-exchanged

          ;set buyer assets and inventory
          set assets (assets - price-tag)
          set peaches-seconds_inventory-current (peaches-seconds_inventory-current + amount-exchanged) 
       
          ; PEACH SECONDS ARE PROCESSED INTO IQF PEACHES HERE 
          ; conversion factor for turning fresh peach seconds into iqf peaches is 93% by volume -- see calcs in dropbox
          if buyers = peach_processors [ 
            set peaches-iqf_inventory-current ( peaches-seconds_inventory-current * peaches-iqf-conversion-rate ) 
            set peaches-seconds_inventory-current 0 ]
        
          ask myself [
            set assets (assets + price-tag)

            set peaches-seconds_inventory-current (peaches-seconds_inventory-current - amount-exchanged)

          ]
        
          table_sum peach-table_seconds  row-id col-id PEACH_SENT amount-exchanged debug-mode  
          update-outstanding-quantity peach-table_seconds  row-id col-id PEACH_OUTSTANDING_QUANTITY PEACH_QUANTITY PEACH_SENT
          
        
        ]
    ]
  ] 

  
  if debug-mode = TRUE [
    print "peach price table"
    debugMatrix peach-table_seconds  PEACH_PRICE ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "peach quantity table"
    debugMatrix peach-table_seconds  PEACH_QUANTITY ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "peaches sent table"
    debugMatrix peach-table_seconds  PEACH_SENT ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "peaches outstanding quantity table"
    debugMatrix peach-table_seconds  PEACH_OUTSTANDING_QUANTITY ( [ who ] of ( max-one-of turtles [ who ] ) ) ]

end 

;*****************************************************************************************************************************
;*****************************************************************************************************************************

to fulfillContracts_peachesIqf [ sellers buyers ] 
  
  if buyers = packer [ set packer peach_farmers with [outsource-packer = 1 ] ]
  if sellers = packer [ set packer peach_farmers with [outsource-packer = 1 ] ] 
  
ask sellers[
    let col-id id
    let product-avail-to-sell peaches-iqf_inventory-current
    let amount-exchanged 0
    let price-exchanged 0
    let price-tag 0

    ask buyers[
      let row-id id
      
      if check-entry peach-table_iqf  row-id col-id PEACH_OUTSTANDING_QUANTITY PEACH_QUANTITY PEACH_SENT [
        
        ifelse check-bigger-than-entry peach-table_iqf  row-id col-id PEACH_OUTSTANDING_QUANTITY product-avail-to-sell
       
        [ set amount-exchanged report-value peach-table_iqf  row-id col-id PEACH_OUTSTANDING_QUANTITY 
          if debug-mode = true [print "amount exchanged:" print amount-exchanged] ]
        [ set amount-exchanged product-avail-to-sell
          if debug-mode = true [print "amount exchanged:" print amount-exchanged] ]
        
          set price-exchanged report-value peach-table_iqf  row-id col-id PEACH_PRICE
        if debug-mode = true [ print "price exchanged:" print price-exchanged ]

          set price-tag price-exchanged * amount-exchanged
          set assets (assets - price-tag)
          set peaches-iqf_inventory-current (peaches-iqf_inventory-current + amount-exchanged)
        
          ask myself [
            set assets (assets + price-tag)
            set peaches-iqf_inventory-current (peaches-iqf_inventory-current - amount-exchanged)
          ]

          table_sum peach-table_iqf  row-id col-id PEACH_SENT amount-exchanged debug-mode  
          update-outstanding-quantity peach-table_iqf  row-id col-id PEACH_OUTSTANDING_QUANTITY PEACH_QUANTITY PEACH_SENT
        ]
    ]
  ]  

  
  if debug-mode = TRUE [
    print "peach price table"
    debugMatrix peach-table_iqf  PEACH_PRICE ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "peach quantity table"
    debugMatrix peach-table_iqf  PEACH_QUANTITY ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "peaches sent table"
    debugMatrix peach-table_iqf  PEACH_SENT ( [ who ] of ( max-one-of turtles [ who ] ) )
    print "peaches outstanding quantity table"
    debugMatrix peach-table_iqf  PEACH_OUTSTANDING_QUANTITY ( [ who ] of ( max-one-of turtles [ who ] ) ) ]

end 












